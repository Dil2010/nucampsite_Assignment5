{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport { baseUrl } from '../../app/shared/baseUrl';\nimport { mapImageURL } from '../../utils/mapImageURL'; // import { CAMPSITES } from '../../app/shared/CAMPSITES';\n\nexport const fetchCampsites = createAsyncThunk('campsites/fetchCampsites', async () => {\n  const response = await fetch(baseUrl + 'campsites');\n\n  if (!response.ok) {\n    return Promise.reject('Unable to fetch, status: ' + response.status);\n  }\n\n  const data = await response.json();\n  return data;\n});\nconst initialState = {\n  campsitesArray: [],\n  isLoading: true,\n  errMsg: ''\n};\nconst campsitesSlice = createSlice({\n  name: 'campsites',\n  initialState,\n  reducers: {},\n  extraReducers: {\n    [fetchCampsites.pending]: state => {\n      state.isLoading = true;\n    },\n    [fetchCampsites.fulfilled]: (state, action) => {\n      state.isLoading = false;\n      state.errMsg = '';\n      state.campsitesArray = mapImageURL(action.payload);\n    },\n    [fetchCampsites.rejected]: (state, action) => {\n      state.isLoading = false;\n      state.errMsg = action.error ? action.error.message : 'Fetch failed';\n    }\n  }\n});\nexport const campsitesReducer = campsitesSlice.reducer;\nexport const selectAllCampsites = state => {\n  return state.campsites.campsitesArray;\n};\nexport const selectCampsiteById = id => state => {\n  return state.campsites.campsitesArray.find(campsite => campsite.id === parseInt(id));\n};\nexport const selectFeaturedCampsite = state => {\n  return {\n    featuredItem: state.campsites.campsitesArray.find(campsite => campsite.featured),\n    isLoading: state.campsites.isLoading,\n    errMsg: state.campsites.errMsg\n  };\n};","map":{"version":3,"names":["createSlice","createAsyncThunk","baseUrl","mapImageURL","fetchCampsites","response","fetch","ok","Promise","reject","status","data","json","initialState","campsitesArray","isLoading","errMsg","campsitesSlice","name","reducers","extraReducers","pending","state","fulfilled","action","payload","rejected","error","message","campsitesReducer","reducer","selectAllCampsites","campsites","selectCampsiteById","id","find","campsite","parseInt","selectFeaturedCampsite","featuredItem","featured"],"sources":["C:/Users/DilanUdz/Desktop/Apps/Apps Planned/nucampsite/src/features/campsites/campsitesSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit'\r\nimport { baseUrl } from '../../app/shared/baseUrl';\r\nimport { mapImageURL } from '../../utils/mapImageURL';\r\n// import { CAMPSITES } from '../../app/shared/CAMPSITES';\r\n\r\n\r\nexport const fetchCampsites = createAsyncThunk(\r\n    'campsites/fetchCampsites',\r\n    async () => {\r\n        const response = await fetch(baseUrl + 'campsites');\r\n        if (!response.ok) {\r\n            return Promise.reject('Unable to fetch, status: ' + response.status);\r\n        }\r\n        const data = await response.json();\r\n        return data;\r\n    }\r\n);\r\n\r\nconst initialState = {\r\n    campsitesArray: [],\r\n    isLoading: true,\r\n    errMsg: ''\r\n};\r\n\r\nconst campsitesSlice = createSlice({\r\n    name: 'campsites',\r\n    initialState,\r\n    reducers: {},\r\n    extraReducers:  {\r\n        [fetchCampsites.pending]: (state) => {\r\n            state.isLoading = true;\r\n        },\r\n        [fetchCampsites.fulfilled]: (state, action) => {\r\n            state.isLoading = false;\r\n            state.errMsg = '';\r\n            state.campsitesArray = mapImageURL(action.payload);\r\n        },\r\n        [fetchCampsites.rejected]: (state, action) => {\r\n            state.isLoading = false;\r\n            state.errMsg = action.error ? action.error.message : 'Fetch failed';\r\n        }\r\n    }\r\n});\r\n\r\nexport const campsitesReducer = campsitesSlice.reducer;\r\n\r\nexport const selectAllCampsites = (state) => {\r\n    return state.campsites.campsitesArray;\r\n};\r\n\r\nexport const selectCampsiteById = (id) => (state) => {\r\n    return state.campsites.campsitesArray.find((campsite) => campsite.id === parseInt(id));\r\n}\r\n\r\nexport const selectFeaturedCampsite = (state) => {\r\n    return {\r\n        featuredItem: state.campsites.campsitesArray.find(\r\n            (campsite) => campsite.featured\r\n        ),\r\n        isLoading: state.campsites.isLoading,\r\n        errMsg: state.campsites.errMsg\r\n    };\r\n};"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,gBAAtB,QAA8C,kBAA9C;AACA,SAASC,OAAT,QAAwB,0BAAxB;AACA,SAASC,WAAT,QAA4B,yBAA5B,C,CACA;;AAGA,OAAO,MAAMC,cAAc,GAAGH,gBAAgB,CAC1C,0BAD0C,EAE1C,YAAY;EACR,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAACJ,OAAO,GAAG,WAAX,CAA5B;;EACA,IAAI,CAACG,QAAQ,CAACE,EAAd,EAAkB;IACd,OAAOC,OAAO,CAACC,MAAR,CAAe,8BAA8BJ,QAAQ,CAACK,MAAtD,CAAP;EACH;;EACD,MAAMC,IAAI,GAAG,MAAMN,QAAQ,CAACO,IAAT,EAAnB;EACA,OAAOD,IAAP;AACH,CATyC,CAAvC;AAYP,MAAME,YAAY,GAAG;EACjBC,cAAc,EAAE,EADC;EAEjBC,SAAS,EAAE,IAFM;EAGjBC,MAAM,EAAE;AAHS,CAArB;AAMA,MAAMC,cAAc,GAAGjB,WAAW,CAAC;EAC/BkB,IAAI,EAAE,WADyB;EAE/BL,YAF+B;EAG/BM,QAAQ,EAAE,EAHqB;EAI/BC,aAAa,EAAG;IACZ,CAAChB,cAAc,CAACiB,OAAhB,GAA2BC,KAAD,IAAW;MACjCA,KAAK,CAACP,SAAN,GAAkB,IAAlB;IACH,CAHW;IAIZ,CAACX,cAAc,CAACmB,SAAhB,GAA4B,CAACD,KAAD,EAAQE,MAAR,KAAmB;MAC3CF,KAAK,CAACP,SAAN,GAAkB,KAAlB;MACAO,KAAK,CAACN,MAAN,GAAe,EAAf;MACAM,KAAK,CAACR,cAAN,GAAuBX,WAAW,CAACqB,MAAM,CAACC,OAAR,CAAlC;IACH,CARW;IASZ,CAACrB,cAAc,CAACsB,QAAhB,GAA2B,CAACJ,KAAD,EAAQE,MAAR,KAAmB;MAC1CF,KAAK,CAACP,SAAN,GAAkB,KAAlB;MACAO,KAAK,CAACN,MAAN,GAAeQ,MAAM,CAACG,KAAP,GAAeH,MAAM,CAACG,KAAP,CAAaC,OAA5B,GAAsC,cAArD;IACH;EAZW;AAJe,CAAD,CAAlC;AAoBA,OAAO,MAAMC,gBAAgB,GAAGZ,cAAc,CAACa,OAAxC;AAEP,OAAO,MAAMC,kBAAkB,GAAIT,KAAD,IAAW;EACzC,OAAOA,KAAK,CAACU,SAAN,CAAgBlB,cAAvB;AACH,CAFM;AAIP,OAAO,MAAMmB,kBAAkB,GAAIC,EAAD,IAASZ,KAAD,IAAW;EACjD,OAAOA,KAAK,CAACU,SAAN,CAAgBlB,cAAhB,CAA+BqB,IAA/B,CAAqCC,QAAD,IAAcA,QAAQ,CAACF,EAAT,KAAgBG,QAAQ,CAACH,EAAD,CAA1E,CAAP;AACH,CAFM;AAIP,OAAO,MAAMI,sBAAsB,GAAIhB,KAAD,IAAW;EAC7C,OAAO;IACHiB,YAAY,EAAEjB,KAAK,CAACU,SAAN,CAAgBlB,cAAhB,CAA+BqB,IAA/B,CACTC,QAAD,IAAcA,QAAQ,CAACI,QADb,CADX;IAIHzB,SAAS,EAAEO,KAAK,CAACU,SAAN,CAAgBjB,SAJxB;IAKHC,MAAM,EAAEM,KAAK,CAACU,SAAN,CAAgBhB;EALrB,CAAP;AAOH,CARM"},"metadata":{},"sourceType":"module"}