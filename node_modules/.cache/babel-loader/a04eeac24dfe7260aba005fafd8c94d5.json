{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\"; // import { COMMENTS } from '../../app/shared/COMMENTS';\n\nimport { baseUrl } from \"../../app/shared/baseUrl\"; // import { fetchPromotions } from '../promotions/promotionsSlice';\n\nexport const fetchComments = createAsyncThunk(\"comments/fetchComments\", async () => {\n  const response = await fetch(baseUrl + \"comments\");\n\n  if (!response.ok) {\n    return Promise.reject(\"Unable to fetch, status: \" + response.status);\n  }\n\n  const data = await response.json();\n  return data;\n});\nexport const postComment = createAsyncThunk(\"comments/postComments\", async (comment, _ref) => {\n  let {\n    dispatch\n  } = _ref;\n  const response = await fetch(baseUrl + \"comments\", {\n    method: \"POST\",\n    body: JSON.stringify(comment),\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  });\n\n  if (!response.ok) {\n    return Promise.reject(\"Unable to fetch, status: \" + response.status);\n  }\n\n  const data = await response.json();\n  dispatch(addComment(data));\n});\nconst initialState = {\n  commentsArray: [],\n  isLoading: true,\n  errMsg: \"\"\n};\nconst commentsSlice = createSlice({\n  name: \"comments\",\n  initialState,\n  reducers: {\n    addComment: (state, action) => {\n      console.log(action.payload);\n      console.log(state.commentsArray);\n      const newComment = {\n        id: state.commentsArray.length + 1,\n        ...action.payload\n      };\n      state.commentsArray.push(newComment);\n    }\n  },\n  extraReducers: {\n    [fetchComments.pending]: state => {\n      state.isLoading = true;\n    },\n    [fetchComments.fulfilled]: (state, action) => {\n      state.isLoading = false;\n      state.errMsg = \"\";\n      state.commentsArray = action.payload;\n    },\n    [fetchComments.rejected]: (state, action) => {\n      state.isLoading = false;\n      state.errMsg = action.error ? action.error.message : \"Fetch failed\";\n    },\n    [postComment.rejected]: (state, action) => {\n      alert(\"Your comment could not be posted\\nError:\" + (action.error ? action.error.message : \"Fetch failed\"));\n    }\n  }\n});\nexport const commentsReducer = commentsSlice.reducer;\nexport const {\n  addComment\n} = commentsSlice.actions;\nexport const selectCommentsByCampsiteId = campsiteId => state => {\n  return state.comments.commentsArray.filter(comment => comment.campsiteId === parseInt(campsiteId));\n};","map":{"version":3,"names":["createSlice","createAsyncThunk","baseUrl","fetchComments","response","fetch","ok","Promise","reject","status","data","json","postComment","comment","dispatch","method","body","JSON","stringify","headers","addComment","initialState","commentsArray","isLoading","errMsg","commentsSlice","name","reducers","state","action","console","log","payload","newComment","id","length","push","extraReducers","pending","fulfilled","rejected","error","message","alert","commentsReducer","reducer","actions","selectCommentsByCampsiteId","campsiteId","comments","filter","parseInt"],"sources":["C:/Users/DilanUdz/Desktop/Apps/Apps Planned/nucampsite/src/features/comments/commentsSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\r\n// import { COMMENTS } from '../../app/shared/COMMENTS';\r\nimport { baseUrl } from \"../../app/shared/baseUrl\";\r\n// import { fetchPromotions } from '../promotions/promotionsSlice';\r\n\r\nexport const fetchComments = createAsyncThunk(\r\n  \"comments/fetchComments\",\r\n  async () => {\r\n    const response = await fetch(baseUrl + \"comments\");\r\n    if (!response.ok) {\r\n      return Promise.reject(\"Unable to fetch, status: \" + response.status);\r\n    }\r\n    const data = await response.json();\r\n    return data;\r\n  }\r\n);\r\n\r\nexport const postComment = createAsyncThunk(\r\n  \"comments/postComments\",\r\n  async (comment, { dispatch }) => {\r\n    const response = await fetch(baseUrl + \"comments\", {\r\n      method: \"POST\",\r\n      body: JSON.stringify(comment),\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n    });\r\n\r\n    if (!response.ok) {\r\n      return Promise.reject(\"Unable to fetch, status: \" + response.status);\r\n    }\r\n    const data = await response.json();\r\n    dispatch(addComment(data));\r\n  }\r\n);\r\n\r\nconst initialState = {\r\n  commentsArray: [],\r\n  isLoading: true,\r\n  errMsg: \"\",\r\n};\r\n\r\nconst commentsSlice = createSlice({\r\n  name: \"comments\",\r\n  initialState,\r\n  reducers: {\r\n    addComment: (state, action) => {\r\n      console.log(action.payload);\r\n      console.log(state.commentsArray);\r\n      const newComment = {\r\n        id: state.commentsArray.length + 1,\r\n        ...action.payload,\r\n      };\r\n      state.commentsArray.push(newComment);\r\n    },\r\n  },\r\n\r\n  extraReducers: {\r\n    [fetchComments.pending]: (state) => {\r\n      state.isLoading = true;\r\n    },\r\n    [fetchComments.fulfilled]: (state, action) => {\r\n      state.isLoading = false;\r\n      state.errMsg = \"\";\r\n      state.commentsArray = action.payload;\r\n    },\r\n    [fetchComments.rejected]: (state, action) => {\r\n      state.isLoading = false;\r\n      state.errMsg = action.error ? action.error.message : \"Fetch failed\";\r\n    },\r\n    [postComment.rejected]: (state, action) => {\r\n      alert(\r\n        \"Your comment could not be posted\\nError:\" +\r\n          (action.error ? action.error.message : \"Fetch failed\")\r\n      );\r\n    },\r\n  },\r\n});\r\n\r\nexport const commentsReducer = commentsSlice.reducer;\r\n\r\nexport const { addComment } = commentsSlice.actions;\r\n\r\nexport const selectCommentsByCampsiteId = (campsiteId) => (state) => {\r\n  return state.comments.commentsArray.filter(\r\n    (comment) => comment.campsiteId === parseInt(campsiteId)\r\n  );\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}