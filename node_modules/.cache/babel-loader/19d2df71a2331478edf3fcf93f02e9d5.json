{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\"; // import { COMMENTS } from '../../app/shared/COMMENTS';\n\nimport { baseUrl } from \"../../app/shared/baseUrl\"; // import { fetchPromotions } from '../promotions/promotionsSlice';\n\nexport const fetchComments = createAsyncThunk('comments/fetchComments', async () => {\n  const response = await fetch(baseUrl + 'comments');\n\n  if (!response.ok) {\n    return Promise.reject('Unable to fetch, status: ' + response.status);\n  }\n\n  const data = await response.json();\n  return data;\n}); // const initialState = {\n//     commentsArray: COMMENTS\n// };\n\nconst initialState = {\n  commentsArray: [],\n  isLoading: true,\n  errMsg: ''\n}; // const promotionsSlice = createSlice({\n//     name: 'promotions',\n//     initialState,\n//     reducers: {},\n//     extraReducers: {\n//         [fetchPromotions.pending]: (state) => {\n//             state.isLoading = true;\n//         },\n//         [fetchPromotions.fulfilled]: (state, action) => {\n//             state.isLoading = false;\n//             state.errMsg = '';\n//             state.promotionsArray = mapImageURL(action.payload);\n//         },\n//         [fetchPromotions.rejected]: (state, action) => {\n//             state.isLoading = false;\n//             state.errMsg = action.error ? action.error.message : 'Fetch failed';\n//         }\n//     }\n// });\n\nconst commentsSlice = createSlice({\n  name: 'comments',\n  initialState,\n  reducers: {},\n  extraReducers: {\n    [fetchPromotions.pending]: state => {\n      state.isLoading = true;\n    },\n    [fetchPromotions.fulfilled]: (state, action) => {\n      state.isLoading = false;\n      state.errMsg = '';\n      state.promotionsArray = mapImageURL(action.payload);\n    },\n    [fetchPromotions.rejected]: (state, action) => {\n      state.isLoading = false;\n      state.errMsg = action.error ? action.error.message : 'Fetch failed';\n    }\n  }\n}); // export const fetchPromotions = createAsyncThunk(\n//     'promotions/fetchPromotions',\n//     async () => {\n//         const response = await fetch(baseUrl + 'promotions');\n//         if (!response.ok) {\n//             return Promise.reject('Unable to fetch, status: ' + response.status);\n//         }\n//         const data = await response.json();\n//         return data;\n//     }\n// );\n\nexport const commentsReducer = commentsSlice.reducer;\nexport const {\n  addComment\n} = commentsSlice.actions;\nexport const selectCommentsByCampsiteId = campsiteId => state => {\n  return state.comments.commentsArray.filter(comment => comment.campsiteId === parseInt(campsiteId));\n};","map":{"version":3,"names":["createSlice","createAsyncThunk","baseUrl","fetchComments","response","fetch","ok","Promise","reject","status","data","json","initialState","commentsArray","isLoading","errMsg","commentsSlice","name","reducers","extraReducers","fetchPromotions","pending","state","fulfilled","action","promotionsArray","mapImageURL","payload","rejected","error","message","commentsReducer","reducer","addComment","actions","selectCommentsByCampsiteId","campsiteId","comments","filter","comment","parseInt"],"sources":["C:/Users/DilanUdz/Desktop/Apps/Apps Planned/nucampsite/src/features/comments/commentsSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\r\n// import { COMMENTS } from '../../app/shared/COMMENTS';\r\nimport { baseUrl } from \"../../app/shared/baseUrl\";\r\n// import { fetchPromotions } from '../promotions/promotionsSlice';\r\n\r\nexport const fetchComments = createAsyncThunk(\r\n    'comments/fetchComments',\r\n    async () => {\r\n        const response = await fetch(baseUrl + 'comments');\r\n        if (!response.ok) {\r\n            return Promise.reject('Unable to fetch, status: ' + response.status);\r\n        }\r\n        const data = await response.json();\r\n        return data;\r\n    }\r\n);\r\n\r\n// const initialState = {\r\n//     commentsArray: COMMENTS\r\n// };\r\nconst initialState = {\r\n    commentsArray: [],\r\n    isLoading: true,\r\n    errMsg: ''\r\n};\r\n\r\n// const promotionsSlice = createSlice({\r\n//     name: 'promotions',\r\n//     initialState,\r\n//     reducers: {},\r\n//     extraReducers: {\r\n//         [fetchPromotions.pending]: (state) => {\r\n//             state.isLoading = true;\r\n//         },\r\n//         [fetchPromotions.fulfilled]: (state, action) => {\r\n//             state.isLoading = false;\r\n//             state.errMsg = '';\r\n//             state.promotionsArray = mapImageURL(action.payload);\r\n//         },\r\n//         [fetchPromotions.rejected]: (state, action) => {\r\n//             state.isLoading = false;\r\n//             state.errMsg = action.error ? action.error.message : 'Fetch failed';\r\n//         }\r\n//     }\r\n// });\r\n\r\nconst commentsSlice = createSlice({\r\n    name: 'comments',\r\n    initialState,\r\n    reducers: {},\r\n    extraReducers: {\r\n        [fetchPromotions.pending]: (state) => {\r\n            state.isLoading = true;\r\n        },\r\n        [fetchPromotions.fulfilled]: (state, action) => {\r\n            state.isLoading = false;\r\n            state.errMsg = '';\r\n            state.promotionsArray = mapImageURL(action.payload);\r\n        },\r\n        [fetchPromotions.rejected]: (state, action) => {\r\n            state.isLoading = false;\r\n            state.errMsg = action.error ? action.error.message : 'Fetch failed';\r\n        }\r\n    }\r\n});\r\n\r\n// export const fetchPromotions = createAsyncThunk(\r\n//     'promotions/fetchPromotions',\r\n//     async () => {\r\n//         const response = await fetch(baseUrl + 'promotions');\r\n//         if (!response.ok) {\r\n//             return Promise.reject('Unable to fetch, status: ' + response.status);\r\n//         }\r\n//         const data = await response.json();\r\n//         return data;\r\n//     }\r\n// );\r\n\r\n\r\n\r\nexport const commentsReducer = commentsSlice.reducer;\r\n\r\nexport const { addComment } = commentsSlice.actions;\r\n\r\nexport const selectCommentsByCampsiteId = (campsiteId) => (state) => {\r\n    return state.comments.commentsArray.filter(\r\n        (comment) => comment.campsiteId === parseInt(campsiteId)\r\n    );\r\n};\r\n\r\n"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,gBAAtB,QAA8C,kBAA9C,C,CACA;;AACA,SAASC,OAAT,QAAwB,0BAAxB,C,CACA;;AAEA,OAAO,MAAMC,aAAa,GAAGF,gBAAgB,CACzC,wBADyC,EAEzC,YAAY;EACR,MAAMG,QAAQ,GAAG,MAAMC,KAAK,CAACH,OAAO,GAAG,UAAX,CAA5B;;EACA,IAAI,CAACE,QAAQ,CAACE,EAAd,EAAkB;IACd,OAAOC,OAAO,CAACC,MAAR,CAAe,8BAA8BJ,QAAQ,CAACK,MAAtD,CAAP;EACH;;EACD,MAAMC,IAAI,GAAG,MAAMN,QAAQ,CAACO,IAAT,EAAnB;EACA,OAAOD,IAAP;AACH,CATwC,CAAtC,C,CAYP;AACA;AACA;;AACA,MAAME,YAAY,GAAG;EACjBC,aAAa,EAAE,EADE;EAEjBC,SAAS,EAAE,IAFM;EAGjBC,MAAM,EAAE;AAHS,CAArB,C,CAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,aAAa,GAAGhB,WAAW,CAAC;EAC9BiB,IAAI,EAAE,UADwB;EAE9BL,YAF8B;EAG9BM,QAAQ,EAAE,EAHoB;EAI9BC,aAAa,EAAE;IACX,CAACC,eAAe,CAACC,OAAjB,GAA4BC,KAAD,IAAW;MAClCA,KAAK,CAACR,SAAN,GAAkB,IAAlB;IACH,CAHU;IAIX,CAACM,eAAe,CAACG,SAAjB,GAA6B,CAACD,KAAD,EAAQE,MAAR,KAAmB;MAC5CF,KAAK,CAACR,SAAN,GAAkB,KAAlB;MACAQ,KAAK,CAACP,MAAN,GAAe,EAAf;MACAO,KAAK,CAACG,eAAN,GAAwBC,WAAW,CAACF,MAAM,CAACG,OAAR,CAAnC;IACH,CARU;IASX,CAACP,eAAe,CAACQ,QAAjB,GAA4B,CAACN,KAAD,EAAQE,MAAR,KAAmB;MAC3CF,KAAK,CAACR,SAAN,GAAkB,KAAlB;MACAQ,KAAK,CAACP,MAAN,GAAeS,MAAM,CAACK,KAAP,GAAeL,MAAM,CAACK,KAAP,CAAaC,OAA5B,GAAsC,cAArD;IACH;EAZU;AAJe,CAAD,CAAjC,C,CAoBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA,OAAO,MAAMC,eAAe,GAAGf,aAAa,CAACgB,OAAtC;AAEP,OAAO,MAAM;EAAEC;AAAF,IAAiBjB,aAAa,CAACkB,OAArC;AAEP,OAAO,MAAMC,0BAA0B,GAAIC,UAAD,IAAiBd,KAAD,IAAW;EACjE,OAAOA,KAAK,CAACe,QAAN,CAAexB,aAAf,CAA6ByB,MAA7B,CACFC,OAAD,IAAaA,OAAO,CAACH,UAAR,KAAuBI,QAAQ,CAACJ,UAAD,CADzC,CAAP;AAGH,CAJM"},"metadata":{},"sourceType":"module"}